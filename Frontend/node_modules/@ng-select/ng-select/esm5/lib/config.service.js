/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var NgSelectConfig = /** @class */ (function () {
    function NgSelectConfig() {
        this.notFoundText = 'No items found';
        this.typeToSearchText = 'Type to search';
        this.addTagText = 'Add item';
        this.loadingText = 'Loading...';
        this.clearAllText = 'Clear all';
        this.disableVirtualScroll = true;
        this.openOnEnter = true;
    }
    /** @nocollapse */ NgSelectConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgSelectConfig_Factory() { return new NgSelectConfig(); }, token: NgSelectConfig, providedIn: "root" });
NgSelectConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgSelectConfig, factory: function NgSelectConfig_Factory(t) { return new (t || NgSelectConfig)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgSelectConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { notFoundText: [], typeToSearchText: [], addTagText: [], loadingText: [], clearAllText: [], disableVirtualScroll: [], openOnEnter: [] });
    return NgSelectConfig;
}());
export { NgSelectConfig };
if (false) {
    /** @type {?} */
    NgSelectConfig.prototype.placeholder;
    /** @type {?} */
    NgSelectConfig.prototype.notFoundText;
    /** @type {?} */
    NgSelectConfig.prototype.typeToSearchText;
    /** @type {?} */
    NgSelectConfig.prototype.addTagText;
    /** @type {?} */
    NgSelectConfig.prototype.loadingText;
    /** @type {?} */
    NgSelectConfig.prototype.clearAllText;
    /** @type {?} */
    NgSelectConfig.prototype.disableVirtualScroll;
    /** @type {?} */
    NgSelectConfig.prototype.openOnEnter;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L3BhdHJvbmVzL3BhdHJvbmVzU2lkZXJjYVdlYi9Gcm9udGVuZC9ub2RlX21vZHVsZXMvQG5nLXNlbGVjdC9uZy1zZWxlY3QvZXNtNS9saWIvY29uZmlnLnNlcnZpY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFNQTs7Ozs7Ozs7O0tBU0ssQUFHQzs7Ozs7OzhLQUNvTSIsImZpbGUiOiJjb25maWcuc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXMsZXh0cmFSZXF1aXJlLG1pc3NpbmdPdmVycmlkZSxtaXNzaW5nUmV0dXJuLHVudXNlZFByaXZhdGVNZW1iZXJzLHVzZWxlc3NDb2RlfSBjaGVja2VkIGJ5IHRzY1xuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBpMCBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xudmFyIE5nU2VsZWN0Q29uZmlnID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5nU2VsZWN0Q29uZmlnKCkge1xuICAgICAgICB0aGlzLm5vdEZvdW5kVGV4dCA9ICdObyBpdGVtcyBmb3VuZCc7XG4gICAgICAgIHRoaXMudHlwZVRvU2VhcmNoVGV4dCA9ICdUeXBlIHRvIHNlYXJjaCc7XG4gICAgICAgIHRoaXMuYWRkVGFnVGV4dCA9ICdBZGQgaXRlbSc7XG4gICAgICAgIHRoaXMubG9hZGluZ1RleHQgPSAnTG9hZGluZy4uLic7XG4gICAgICAgIHRoaXMuY2xlYXJBbGxUZXh0ID0gJ0NsZWFyIGFsbCc7XG4gICAgICAgIHRoaXMuZGlzYWJsZVZpcnR1YWxTY3JvbGwgPSB0cnVlO1xuICAgICAgICB0aGlzLm9wZW5PbkVudGVyID0gdHJ1ZTtcbiAgICB9XG4gICAgTmdTZWxlY3RDb25maWcuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBJbmplY3RhYmxlLCBhcmdzOiBbeyBwcm92aWRlZEluOiAncm9vdCcgfSxdIH1cbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqLyBOZ1NlbGVjdENvbmZpZy5uZ0luamVjdGFibGVEZWYgPSBpMC7Jtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGZ1bmN0aW9uIE5nU2VsZWN0Q29uZmlnX0ZhY3RvcnkoKSB7IHJldHVybiBuZXcgTmdTZWxlY3RDb25maWcoKTsgfSwgdG9rZW46IE5nU2VsZWN0Q29uZmlnLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcbiAgICByZXR1cm4gTmdTZWxlY3RDb25maWc7XG59KCkpO1xuZXhwb3J0IHsgTmdTZWxlY3RDb25maWcgfTtcbmlmIChmYWxzZSkge1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ1NlbGVjdENvbmZpZy5wcm90b3R5cGUucGxhY2Vob2xkZXI7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nU2VsZWN0Q29uZmlnLnByb3RvdHlwZS5ub3RGb3VuZFRleHQ7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nU2VsZWN0Q29uZmlnLnByb3RvdHlwZS50eXBlVG9TZWFyY2hUZXh0O1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ1NlbGVjdENvbmZpZy5wcm90b3R5cGUuYWRkVGFnVGV4dDtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdTZWxlY3RDb25maWcucHJvdG90eXBlLmxvYWRpbmdUZXh0O1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ1NlbGVjdENvbmZpZy5wcm90b3R5cGUuY2xlYXJBbGxUZXh0O1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ1NlbGVjdENvbmZpZy5wcm90b3R5cGUuZGlzYWJsZVZpcnR1YWxTY3JvbGw7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nU2VsZWN0Q29uZmlnLnByb3RvdHlwZS5vcGVuT25FbnRlcjtcbn1cbiJdfQ==