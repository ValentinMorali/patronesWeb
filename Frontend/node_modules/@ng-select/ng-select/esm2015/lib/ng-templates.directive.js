/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, TemplateRef } from '@angular/core';
import { escapeHTML } from './value-utils';
import * as ɵngcc0 from '@angular/core';
export class NgItemLabelDirective {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
        this.escape = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.element.nativeElement.innerHTML = this.escape ?
            escapeHTML(this.ngItemLabel) :
            this.ngItemLabel;
    }
}
NgItemLabelDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgItemLabelDirective, selectors: [["", "ngItemLabel", ""]], factory: function NgItemLabelDirective_Factory(t) { return new (t || NgItemLabelDirective)(ɵngcc0.ɵɵdirectiveInject(ElementRef)); }, inputs: { escape: "escape", ngItemLabel: "ngItemLabel" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgItemLabelDirective, [{
        type: Directive,
        args: [{ selector: '[ngItemLabel]' }]
    }], function () { return [{ type: ElementRef }]; }, { constructor: [], element: [], escape: [{
            type: Input
        }], ngOnChanges: [], ngItemLabel: [{
            type: Input
        }] });
/** @nocollapse */
NgItemLabelDirective.ctorParameters = () => [
    { type: ElementRef }
];
NgItemLabelDirective.propDecorators = {
    ngItemLabel: [{ type: Input }],
    escape: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgItemLabelDirective.prototype.ngItemLabel;
    /** @type {?} */
    NgItemLabelDirective.prototype.escape;
    /**
     * @type {?}
     * @private
     */
    NgItemLabelDirective.prototype.element;
}
export class NgOptionTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
NgOptionTemplateDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgOptionTemplateDirective, selectors: [["", "ng-option-tmp", ""]], factory: function NgOptionTemplateDirective_Factory(t) { return new (t || NgOptionTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef)); } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgOptionTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-option-tmp]' }]
    }], function () { return [{ type: TemplateRef }]; }, { constructor: [], template: [] });
/** @nocollapse */
NgOptionTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    NgOptionTemplateDirective.prototype.template;
}
export class NgOptgroupTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
NgOptgroupTemplateDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgOptgroupTemplateDirective, selectors: [["", "ng-optgroup-tmp", ""]], factory: function NgOptgroupTemplateDirective_Factory(t) { return new (t || NgOptgroupTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef)); } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgOptgroupTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-optgroup-tmp]' }]
    }], function () { return [{ type: TemplateRef }]; }, { constructor: [], template: [] });
/** @nocollapse */
NgOptgroupTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    NgOptgroupTemplateDirective.prototype.template;
}
export class NgLabelTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
NgLabelTemplateDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgLabelTemplateDirective, selectors: [["", "ng-label-tmp", ""]], factory: function NgLabelTemplateDirective_Factory(t) { return new (t || NgLabelTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef)); } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgLabelTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-label-tmp]' }]
    }], function () { return [{ type: TemplateRef }]; }, { constructor: [], template: [] });
/** @nocollapse */
NgLabelTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    NgLabelTemplateDirective.prototype.template;
}
export class NgMultiLabelTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
NgMultiLabelTemplateDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgMultiLabelTemplateDirective, selectors: [["", "ng-multi-label-tmp", ""]], factory: function NgMultiLabelTemplateDirective_Factory(t) { return new (t || NgMultiLabelTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef)); } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgMultiLabelTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-multi-label-tmp]' }]
    }], function () { return [{ type: TemplateRef }]; }, { constructor: [], template: [] });
/** @nocollapse */
NgMultiLabelTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    NgMultiLabelTemplateDirective.prototype.template;
}
export class NgHeaderTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
NgHeaderTemplateDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgHeaderTemplateDirective, selectors: [["", "ng-header-tmp", ""]], factory: function NgHeaderTemplateDirective_Factory(t) { return new (t || NgHeaderTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef)); } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgHeaderTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-header-tmp]' }]
    }], function () { return [{ type: TemplateRef }]; }, { constructor: [], template: [] });
/** @nocollapse */
NgHeaderTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    NgHeaderTemplateDirective.prototype.template;
}
export class NgFooterTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
NgFooterTemplateDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgFooterTemplateDirective, selectors: [["", "ng-footer-tmp", ""]], factory: function NgFooterTemplateDirective_Factory(t) { return new (t || NgFooterTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef)); } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgFooterTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-footer-tmp]' }]
    }], function () { return [{ type: TemplateRef }]; }, { constructor: [], template: [] });
/** @nocollapse */
NgFooterTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    NgFooterTemplateDirective.prototype.template;
}
export class NgNotFoundTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
NgNotFoundTemplateDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgNotFoundTemplateDirective, selectors: [["", "ng-notfound-tmp", ""]], factory: function NgNotFoundTemplateDirective_Factory(t) { return new (t || NgNotFoundTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef)); } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgNotFoundTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-notfound-tmp]' }]
    }], function () { return [{ type: TemplateRef }]; }, { constructor: [], template: [] });
/** @nocollapse */
NgNotFoundTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    NgNotFoundTemplateDirective.prototype.template;
}
export class NgTypeToSearchTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
NgTypeToSearchTemplateDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgTypeToSearchTemplateDirective, selectors: [["", "ng-typetosearch-tmp", ""]], factory: function NgTypeToSearchTemplateDirective_Factory(t) { return new (t || NgTypeToSearchTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef)); } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgTypeToSearchTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-typetosearch-tmp]' }]
    }], function () { return [{ type: TemplateRef }]; }, { constructor: [], template: [] });
/** @nocollapse */
NgTypeToSearchTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    NgTypeToSearchTemplateDirective.prototype.template;
}
export class NgLoadingTextTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
NgLoadingTextTemplateDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgLoadingTextTemplateDirective, selectors: [["", "ng-loadingtext-tmp", ""]], factory: function NgLoadingTextTemplateDirective_Factory(t) { return new (t || NgLoadingTextTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef)); } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgLoadingTextTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-loadingtext-tmp]' }]
    }], function () { return [{ type: TemplateRef }]; }, { constructor: [], template: [] });
/** @nocollapse */
NgLoadingTextTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    NgLoadingTextTemplateDirective.prototype.template;
}
export class NgTagTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
NgTagTemplateDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgTagTemplateDirective, selectors: [["", "ng-tag-tmp", ""]], factory: function NgTagTemplateDirective_Factory(t) { return new (t || NgTagTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef)); } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgTagTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-tag-tmp]' }]
    }], function () { return [{ type: TemplateRef }]; }, { constructor: [], template: [] });
/** @nocollapse */
NgTagTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    NgTagTemplateDirective.prototype.template;
}
export class NgLoadingSpinnerTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
NgLoadingSpinnerTemplateDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgLoadingSpinnerTemplateDirective, selectors: [["", "ng-loadingspinner-tmp", ""]], factory: function NgLoadingSpinnerTemplateDirective_Factory(t) { return new (t || NgLoadingSpinnerTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(TemplateRef)); } });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgLoadingSpinnerTemplateDirective, [{
        type: Directive,
        args: [{ selector: '[ng-loadingspinner-tmp]' }]
    }], function () { return [{ type: TemplateRef }]; }, { constructor: [], template: [] });
/** @nocollapse */
NgLoadingSpinnerTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
if (false) {
    /** @type {?} */
    NgLoadingSpinnerTemplateDirective.prototype.template;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,