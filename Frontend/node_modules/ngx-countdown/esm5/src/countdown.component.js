import * as ɵngcc0 from '@angular/core';

const _c0 = ["count-down"];
const _c1 = ["*"];
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Component, ElementRef, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewEncapsulation, } from '@angular/core';
import { Timer } from './countdown.timer';
import { CountdownConfig } from './countdown.config';
var CountdownComponent = /** @class */ (function () {
    function CountdownComponent(el, timer, cog) {
        this.el = el;
        this.timer = timer;
        this.cog = cog;
        this.frequency = 1000;
        this._notify = {};
        this.hands = [];
        this.left = 0;
        this.paused = false;
        /** 两种情况会触发：时间终止或调用 `stop()` */
        this.stoped = false;
        this.start = new EventEmitter();
        this.finished = new EventEmitter();
        this.notify = new EventEmitter();
        this.event = new EventEmitter();
    }
    /** 开始，当 `demand: false` 时触发 */
    CountdownComponent.prototype.begin = function () {
        this.paused = false;
        this.start.emit();
        this.callEvent('start');
    };
    /** 重新开始 */
    CountdownComponent.prototype.restart = function () {
        if (!this.stoped)
            this.destroy();
        this.init();
        this.callEvent('restart');
    };
    /** 停止 */
    CountdownComponent.prototype.stop = function () {
        if (this.stoped)
            return;
        this.stoped = true;
        this.destroy();
        this.callEvent('stop');
    };
    /** 暂停（限未终止有效） */
    CountdownComponent.prototype.pause = function () {
        if (this.stoped || this.paused)
            return;
        this.paused = true;
        this.callEvent('pause');
    };
    /** 恢复 */
    CountdownComponent.prototype.resume = function () {
        if (this.stoped || !this.paused)
            return;
        this.paused = false;
        this.callEvent('resume');
    };
    CountdownComponent.prototype.callEvent = function (action) {
        this.event.emit({ action: action, left: this.left });
    };
    CountdownComponent.prototype.init = function () {
        var me = this;
        me.config = __assign({}, new CountdownConfig(), me.cog, me.config);
        var el = me.el.nativeElement;
        me.paused = me.config.demand;
        me.stoped = false;
        // 分析markup
        var tmpl = el.innerHTML || me.config.template;
        me.config.varRegular.lastIndex = 0;
        el.innerHTML = tmpl.replace(me.config.varRegular, function (str, type) {
            // 时钟频率校正.
            if (type === 'u' || type === 's-ext')
                me.frequency = 100;
            // 生成hand的markup
            var content = '';
            if (type === 's-ext') {
                me.hands.push({ type: 's' });
                me.hands.push({ type: 'u' });
                content =
                    me.html('', 's', 'handlet') +
                        me.html('.', '', 'digital') +
                        me.html('', 'u', 'handlet');
            }
            else {
                me.hands.push({ type: type });
            }
            return me.html(content, type, 'hand');
        });
        var clock = me.config.clock;
        me.hands.forEach(function (hand) {
            var type = hand.type;
            var base = 100, i;
            hand.node = el.querySelector(".hand-" + type);
            // radix, bits 初始化
            for (i = clock.length - 3; i > -1; i -= 3) {
                if (type === clock[i]) {
                    break;
                }
                base *= clock[i + 1];
            }
            hand.base = base;
            hand.radix = clock[i + 1];
            hand.bits = clock[i + 2];
        });
        me.getLeft();
        me.reflow(0, true);
        // bind reflow to me
        var _reflow = me.reflow;
        me.reflow = function (count) {
            if (count === void 0) { count = 0; }
            return _reflow.apply(me, [count]);
        };
        // 构建 notify
        if (me.config.notify) {
            me.config.notify.forEach(function (time) {
                if (time < 1)
                    throw new Error("the notify config must be a positive integer.");
                time = time * 1000;
                time = time - (time % me.frequency);
                me._notify[time] = true;
            });
        }
        me.timer.add(me.reflow, me.frequency);
        // show
        el.style.display = 'inline';
        this.timer.start();
        return me;
    };
    CountdownComponent.prototype.destroy = function () {
        this.timer.remove(this.reflow);
        return this;
    };
    /**
     * 更新时钟
     */
    CountdownComponent.prototype.reflow = function (count, force) {
        if (count === void 0) { count = 0; }
        if (force === void 0) { force = false; }
        var me = this;
        if (!force && (me.paused || me.stoped))
            return;
        me.left = me.left - me.frequency * count;
        me.hands.forEach(function (hand) {
            hand.lastValue = hand.value;
            hand.value = Math.floor(me.left / hand.base) % hand.radix;
        });
        me.repaint();
        if (me._notify[me.left]) {
            me.notify.emit(me.left);
            me.callEvent('notify');
        }
        if (me.left < 1) {
            me.finished.emit(0);
            me.stoped = true;
            me.callEvent('finished');
            me.destroy();
        }
    };
    /**
     * 重绘时钟
     */
    CountdownComponent.prototype.repaint = function () {
        var me = this;
        if (me.config.repaint) {
            me.config.repaint.apply(me);
            return;
        }
        var content;
        me.hands.forEach(function (hand) {
            if (hand.lastValue !== hand.value) {
                content = '';
                me.toDigitals(hand.value, hand.bits).forEach(function (digital) {
                    content += me.html(digital.toString(), '', 'digital');
                });
                hand.node.innerHTML = content;
            }
        });
    };
    /**
     * 获取倒计时剩余帧数
     */
    CountdownComponent.prototype.getLeft = function () {
        var me = this;
        var left = me.config.leftTime * 1000;
        var end = me.config.stopTime;
        if (!left && end)
            left = end - new Date().getTime();
        me.left = left - (left % me.frequency);
    };
    /**
     * 生成需要的html代码，辅助工具
     */
    CountdownComponent.prototype.html = function (con, className, type) {
        switch (type) {
            case 'hand':
            case 'handlet':
                className = type + ' hand-' + className;
                break;
            case 'digital':
                if (con === '.') {
                    className = type + ' ' + type + '-point ' + className;
                }
                else {
                    className = type + ' ' + type + '-' + con + ' ' + className;
                }
                break;
        }
        return '<span class="' + className + '">' + con + '</span>';
    };
    /**
     * 把值转换为独立的数字形式
     */
    CountdownComponent.prototype.toDigitals = function (value, bits) {
        value = value < 0 ? 0 : value;
        var digitals = [];
        // 把时、分、秒等换算成数字.
        while (bits--) {
            digitals[bits] = value % 10;
            value = Math.floor(value / 10);
        }
        return digitals;
    };
    CountdownComponent.prototype.ngOnInit = function () {
        this.init();
        if (!this.config.demand)
            this.begin();
    };
    CountdownComponent.prototype.ngOnDestroy = function () {
        this.destroy();
    };
    CountdownComponent.prototype.ngOnChanges = function (changes) {
        if (!changes.config.firstChange) {
            this.restart();
        }
    };
    /** @nocollapse */
    CountdownComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Timer },
        { type: CountdownConfig }
    ]; };
    CountdownComponent.propDecorators = {
        config: [{ type: Input }],
        start: [{ type: Output }],
        finished: [{ type: Output }],
        notify: [{ type: Output }],
        event: [{ type: Output }]
    };
CountdownComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: CountdownComponent, selectors: [["countdown"]], factory: function CountdownComponent_Factory(t) { return new (t || CountdownComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(Timer), ɵngcc0.ɵɵdirectiveInject(CountdownConfig)); }, hostBindings: function CountdownComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵstyling(_c0);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp(0, true);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { config: "config" }, outputs: { start: "start", finished: "finished", notify: "notify", event: "event" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, consts: 1, vars: 0, template: function CountdownComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["\n      countdown {\n        display: none;\n      }\n    "], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(CountdownComponent, [{
        type: Component,
        args: [{
                selector: 'countdown',
                template: "\n    <ng-content></ng-content>\n  ",
                host: { '[class.count-down]': 'true' },
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["\n      countdown {\n        display: none;\n      }\n    "]
            }]
    }], function () { return [{ type: ElementRef }, { type: Timer }, { type: CountdownConfig }]; }, { el: [], timer: [], cog: [], frequency: [], _notify: [], hands: [], left: [], paused: [], stoped: [], start: [{
            type: Output
        }], finished: [{
            type: Output
        }], notify: [{
            type: Output
        }], event: [{
            type: Output
        }], begin: [], restart: [], stop: [], pause: [], resume: [], callEvent: [], init: [], destroy: [], reflow: [], repaint: [], getLeft: [], html: [], toDigitals: [], ngOnInit: [], ngOnDestroy: [], ngOnChanges: [], config: [{
            type: Input
        }] });
    return CountdownComponent;
}());
export { CountdownComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,