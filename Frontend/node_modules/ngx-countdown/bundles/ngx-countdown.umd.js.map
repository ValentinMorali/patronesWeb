{"version":3,"sources":["c:/patrones/patronesSidercaWeb/Frontend/node_modules/ngx-countdown/bundles/ngx-countdown.umd.js"],"names":[],"mappings":"AAAA;4LACwI;yJACjB;2GAC5C;kDACvC;;;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAgE9B;;;;mIAGA;;;;;;;;;;;;SAYD,AAGC;;;;;;uHACmL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA2PnL,AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAeA;;;;;;SAMD;;;;;;;;;;;;yMAQC","file":"ngx-countdown.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) :\n    typeof define === 'function' && define.amd ? define('ngx-countdown', ['exports', '@angular/common', '@angular/core'], factory) :\n    (factory((global['ngx-countdown'] = {}),global.ng.common,global.ng.core));\n}(this, (function (exports,common,i0) { 'use strict';\n\n    var Timer = /** @class */ (function () {\n        function Timer() {\n            this.fns = [];\n            this.commands = [];\n            this.ing = false;\n        }\n        Timer.prototype.start = function () {\n            if (this.ing === true)\n                return;\n            this.ing = true;\n            this.nextTime = +new Date();\n            this.process();\n        };\n        Timer.prototype.process = function () {\n            var _this = this;\n            while (this.commands.length) {\n                this.commands.shift()();\n            }\n            var diff = +new Date() - this.nextTime;\n            var count = 1 + Math.floor(diff / 100);\n            diff = 100 - diff % 100;\n            this.nextTime += 100 * count;\n            var frequency, step, i, len;\n            for (i = 0, len = this.fns.length; i < len; i += 2) {\n                frequency = this.fns[i + 1];\n                // 100/s\n                if (0 === frequency) {\n                    this.fns[i](count);\n                    // 1000/s\n                }\n                else {\n                    // 先把末位至0，再每次加2\n                    frequency += 2 * count - 1;\n                    step = Math.floor(frequency / 20);\n                    if (step > 0) {\n                        this.fns[i](step);\n                    }\n                    // 把末位还原成1\n                    this.fns[i + 1] = frequency % 20 + 1;\n                }\n            }\n            if (this.ing) {\n                setTimeout(function () { return _this.process(); }, diff);\n            }\n        };\n        Timer.prototype.add = function (fn, frequency) {\n            var _this = this;\n            this.commands.push(function () {\n                _this.fns.push(fn);\n                _this.fns.push(frequency === 1000 ? 1 : 0);\n                _this.ing = true;\n            });\n        };\n        Timer.prototype.remove = function (fn) {\n            var _this = this;\n            this.commands.push(function () {\n                var i = _this.fns.indexOf(fn);\n                if (i !== -1) {\n                    _this.fns.splice(i, 2);\n                }\n                _this.ing = _this.fns.length > 0;\n            });\n        };\n        Timer.decorators = [\n            { type: i0.Injectable }\n        ];\n        return Timer;\n    }());\n\n    var CountdownConfig = /** @class */ (function () {\n        function CountdownConfig() {\n            this.demand = false;\n            this.leftTime = 0;\n            this.template = '$!h!时$!m!分$!s!秒';\n            this.effect = 'normal';\n            this.varRegular = /\\$\\!([\\-\\w]+)\\!/g;\n            this.clock = ['d', 100, 2, 'h', 24, 2, 'm', 60, 2, 's', 60, 2, 'u', 10, 1];\n        }\n        CountdownConfig.decorators = [\n            { type: i0.Injectable, args: [{ providedIn: 'root' },] }\n        ];\n        CountdownConfig.ngInjectableDef = i0.defineInjectable({ factory: function CountdownConfig_Factory() { return new CountdownConfig(); }, token: CountdownConfig, providedIn: \"root\" });\n        return CountdownConfig;\n    }());\n\n    var __assign = (this && this.__assign) || function () {\n        __assign = Object.assign || function (t) {\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\n                s = arguments[i];\n                for (var p in s)\n                    if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n            }\n            return t;\n        };\n        return __assign.apply(this, arguments);\n    };\n    var CountdownComponent = /** @class */ (function () {\n        function CountdownComponent(el, timer, cog) {\n            this.el = el;\n            this.timer = timer;\n            this.cog = cog;\n            this.frequency = 1000;\n            this._notify = {};\n            this.hands = [];\n            this.left = 0;\n            this.paused = false;\n            /** 两种情况会触发：时间终止或调用 `stop()` */\n            this.stoped = false;\n            this.start = new i0.EventEmitter();\n            this.finished = new i0.EventEmitter();\n            this.notify = new i0.EventEmitter();\n            this.event = new i0.EventEmitter();\n        }\n        /** 开始，当 `demand: false` 时触发 */\n        CountdownComponent.prototype.begin = function () {\n            this.paused = false;\n            this.start.emit();\n            this.callEvent('start');\n        };\n        /** 重新开始 */\n        CountdownComponent.prototype.restart = function () {\n            if (!this.stoped)\n                this.destroy();\n            this.init();\n            this.callEvent('restart');\n        };\n        /** 停止 */\n        CountdownComponent.prototype.stop = function () {\n            if (this.stoped)\n                return;\n            this.stoped = true;\n            this.destroy();\n            this.callEvent('stop');\n        };\n        /** 暂停（限未终止有效） */\n        CountdownComponent.prototype.pause = function () {\n            if (this.stoped || this.paused)\n                return;\n            this.paused = true;\n            this.callEvent('pause');\n        };\n        /** 恢复 */\n        CountdownComponent.prototype.resume = function () {\n            if (this.stoped || !this.paused)\n                return;\n            this.paused = false;\n            this.callEvent('resume');\n        };\n        CountdownComponent.prototype.callEvent = function (action) {\n            this.event.emit({ action: action, left: this.left });\n        };\n        CountdownComponent.prototype.init = function () {\n            var me = this;\n            me.config = __assign({}, new CountdownConfig(), me.cog, me.config);\n            var el = me.el.nativeElement;\n            me.paused = me.config.demand;\n            me.stoped = false;\n            // 分析markup\n            var tmpl = el.innerHTML || me.config.template;\n            me.config.varRegular.lastIndex = 0;\n            el.innerHTML = tmpl.replace(me.config.varRegular, function (str, type) {\n                // 时钟频率校正.\n                if (type === 'u' || type === 's-ext')\n                    me.frequency = 100;\n                // 生成hand的markup\n                var content = '';\n                if (type === 's-ext') {\n                    me.hands.push({ type: 's' });\n                    me.hands.push({ type: 'u' });\n                    content =\n                        me.html('', 's', 'handlet') +\n                            me.html('.', '', 'digital') +\n                            me.html('', 'u', 'handlet');\n                }\n                else {\n                    me.hands.push({ type: type });\n                }\n                return me.html(content, type, 'hand');\n            });\n            var clock = me.config.clock;\n            me.hands.forEach(function (hand) {\n                var type = hand.type;\n                var base = 100, i;\n                hand.node = el.querySelector(\".hand-\" + type);\n                // radix, bits 初始化\n                for (i = clock.length - 3; i > -1; i -= 3) {\n                    if (type === clock[i]) {\n                        break;\n                    }\n                    base *= clock[i + 1];\n                }\n                hand.base = base;\n                hand.radix = clock[i + 1];\n                hand.bits = clock[i + 2];\n            });\n            me.getLeft();\n            me.reflow(0, true);\n            // bind reflow to me\n            var _reflow = me.reflow;\n            me.reflow = function (count) {\n                if (count === void 0) {\n                    count = 0;\n                }\n                return _reflow.apply(me, [count]);\n            };\n            // 构建 notify\n            if (me.config.notify) {\n                me.config.notify.forEach(function (time) {\n                    if (time < 1)\n                        throw new Error(\"the notify config must be a positive integer.\");\n                    time = time * 1000;\n                    time = time - (time % me.frequency);\n                    me._notify[time] = true;\n                });\n            }\n            me.timer.add(me.reflow, me.frequency);\n            // show\n            el.style.display = 'inline';\n            this.timer.start();\n            return me;\n        };\n        CountdownComponent.prototype.destroy = function () {\n            this.timer.remove(this.reflow);\n            return this;\n        };\n        /**\n         * 更新时钟\n         */\n        CountdownComponent.prototype.reflow = function (count, force) {\n            if (count === void 0) {\n                count = 0;\n            }\n            if (force === void 0) {\n                force = false;\n            }\n            var me = this;\n            if (!force && (me.paused || me.stoped))\n                return;\n            me.left = me.left - me.frequency * count;\n            me.hands.forEach(function (hand) {\n                hand.lastValue = hand.value;\n                hand.value = Math.floor(me.left / hand.base) % hand.radix;\n            });\n            me.repaint();\n            if (me._notify[me.left]) {\n                me.notify.emit(me.left);\n                me.callEvent('notify');\n            }\n            if (me.left < 1) {\n                me.finished.emit(0);\n                me.stoped = true;\n                me.callEvent('finished');\n                me.destroy();\n            }\n        };\n        /**\n         * 重绘时钟\n         */\n        CountdownComponent.prototype.repaint = function () {\n            var me = this;\n            if (me.config.repaint) {\n                me.config.repaint.apply(me);\n                return;\n            }\n            var content;\n            me.hands.forEach(function (hand) {\n                if (hand.lastValue !== hand.value) {\n                    content = '';\n                    me.toDigitals(hand.value, hand.bits).forEach(function (digital) {\n                        content += me.html(digital.toString(), '', 'digital');\n                    });\n                    hand.node.innerHTML = content;\n                }\n            });\n        };\n        /**\n         * 获取倒计时剩余帧数\n         */\n        CountdownComponent.prototype.getLeft = function () {\n            var me = this;\n            var left = me.config.leftTime * 1000;\n            var end = me.config.stopTime;\n            if (!left && end)\n                left = end - new Date().getTime();\n            me.left = left - (left % me.frequency);\n        };\n        /**\n         * 生成需要的html代码，辅助工具\n         */\n        CountdownComponent.prototype.html = function (con, className, type) {\n            switch (type) {\n                case 'hand':\n                case 'handlet':\n                    className = type + ' hand-' + className;\n                    break;\n                case 'digital':\n                    if (con === '.') {\n                        className = type + ' ' + type + '-point ' + className;\n                    }\n                    else {\n                        className = type + ' ' + type + '-' + con + ' ' + className;\n                    }\n                    break;\n            }\n            return '<span class=\"' + className + '\">' + con + '</span>';\n        };\n        /**\n         * 把值转换为独立的数字形式\n         */\n        CountdownComponent.prototype.toDigitals = function (value, bits) {\n            value = value < 0 ? 0 : value;\n            var digitals = [];\n            // 把时、分、秒等换算成数字.\n            while (bits--) {\n                digitals[bits] = value % 10;\n                value = Math.floor(value / 10);\n            }\n            return digitals;\n        };\n        CountdownComponent.prototype.ngOnInit = function () {\n            this.init();\n            if (!this.config.demand)\n                this.begin();\n        };\n        CountdownComponent.prototype.ngOnDestroy = function () {\n            this.destroy();\n        };\n        CountdownComponent.prototype.ngOnChanges = function (changes) {\n            if (!changes.config.firstChange) {\n                this.restart();\n            }\n        };\n        CountdownComponent.decorators = [\n            { type: i0.Component, args: [{\n                        selector: 'countdown',\n                        template: \"\\n    <ng-content></ng-content>\\n  \",\n                        host: { '[class.count-down]': 'true' },\n                        encapsulation: i0.ViewEncapsulation.None,\n                        changeDetection: i0.ChangeDetectionStrategy.OnPush,\n                        styles: [\"\\n      countdown {\\n        display: none;\\n      }\\n    \"]\n                    }] }\n        ];\n        /** @nocollapse */\n        CountdownComponent.ctorParameters = function () {\n            return [\n                { type: i0.ElementRef },\n                { type: Timer },\n                { type: CountdownConfig }\n            ];\n        };\n        CountdownComponent.propDecorators = {\n            config: [{ type: i0.Input }],\n            start: [{ type: i0.Output }],\n            finished: [{ type: i0.Output }],\n            notify: [{ type: i0.Output }],\n            event: [{ type: i0.Output }]\n        };\n        return CountdownComponent;\n    }());\n\n    var CountdownModule = /** @class */ (function () {\n        function CountdownModule() {\n        }\n        CountdownModule.decorators = [\n            { type: i0.NgModule, args: [{\n                        imports: [common.CommonModule],\n                        providers: [Timer],\n                        declarations: [CountdownComponent],\n                        exports: [CountdownComponent]\n                    },] }\n        ];\n        return CountdownModule;\n    }());\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵa = CountdownConfig;\n    exports.CountdownComponent = CountdownComponent;\n    exports.Timer = Timer;\n    exports.CountdownModule = CountdownModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}