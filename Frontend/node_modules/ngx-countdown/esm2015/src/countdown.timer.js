import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class Timer {
    constructor() {
        this.fns = [];
        this.commands = [];
        this.ing = false;
    }
    start() {
        if (this.ing === true)
            return;
        this.ing = true;
        this.nextTime = +new Date();
        this.process();
    }
    process() {
        while (this.commands.length) {
            this.commands.shift()();
        }
        let diff = +new Date() - this.nextTime;
        const count = 1 + Math.floor(diff / 100);
        diff = 100 - diff % 100;
        this.nextTime += 100 * count;
        let frequency, step, i, len;
        for (i = 0, len = this.fns.length; i < len; i += 2) {
            frequency = this.fns[i + 1];
            // 100/s
            if (0 === frequency) {
                this.fns[i](count);
                // 1000/s
            }
            else {
                // 先把末位至0，再每次加2
                frequency += 2 * count - 1;
                step = Math.floor(frequency / 20);
                if (step > 0) {
                    this.fns[i](step);
                }
                // 把末位还原成1
                this.fns[i + 1] = frequency % 20 + 1;
            }
        }
        if (this.ing) {
            setTimeout(() => this.process(), diff);
        }
    }
    add(fn, frequency) {
        this.commands.push(() => {
            this.fns.push(fn);
            this.fns.push(frequency === 1000 ? 1 : 0);
            this.ing = true;
        });
    }
    remove(fn) {
        this.commands.push(() => {
            const i = this.fns.indexOf(fn);
            if (i !== -1) {
                this.fns.splice(i, 2);
            }
            this.ing = this.fns.length > 0;
        });
    }
}
Timer.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: Timer, factory: function Timer_Factory(t) { return new (t || Timer)(); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(Timer, [{
        type: Injectable
    }], function () { return []; }, { constructor: [], fns: [], commands: [], ing: [], start: [], nextTime: [], process: [], add: [], remove: [] });

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L3BhdHJvbmVzL3BhdHJvbmVzU2lkZXJjYVdlYi9Gcm9udGVuZC9ub2RlX21vZHVsZXMvbmd4LWNvdW50ZG93bi9lc20yMDE1L3NyYy9jb3VudGRvd24udGltZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E0REMsbUpBR0MiLCJmaWxlIjoiY291bnRkb3duLnRpbWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuZXhwb3J0IGNsYXNzIFRpbWVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5mbnMgPSBbXTtcbiAgICAgICAgdGhpcy5jb21tYW5kcyA9IFtdO1xuICAgICAgICB0aGlzLmluZyA9IGZhbHNlO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5nID09PSB0cnVlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmluZyA9IHRydWU7XG4gICAgICAgIHRoaXMubmV4dFRpbWUgPSArbmV3IERhdGUoKTtcbiAgICAgICAgdGhpcy5wcm9jZXNzKCk7XG4gICAgfVxuICAgIHByb2Nlc3MoKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLmNvbW1hbmRzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5jb21tYW5kcy5zaGlmdCgpKCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRpZmYgPSArbmV3IERhdGUoKSAtIHRoaXMubmV4dFRpbWU7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gMSArIE1hdGguZmxvb3IoZGlmZiAvIDEwMCk7XG4gICAgICAgIGRpZmYgPSAxMDAgLSBkaWZmICUgMTAwO1xuICAgICAgICB0aGlzLm5leHRUaW1lICs9IDEwMCAqIGNvdW50O1xuICAgICAgICBsZXQgZnJlcXVlbmN5LCBzdGVwLCBpLCBsZW47XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHRoaXMuZm5zLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgICAgICAgICBmcmVxdWVuY3kgPSB0aGlzLmZuc1tpICsgMV07XG4gICAgICAgICAgICAvLyAxMDAvc1xuICAgICAgICAgICAgaWYgKDAgPT09IGZyZXF1ZW5jeSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZm5zW2ldKGNvdW50KTtcbiAgICAgICAgICAgICAgICAvLyAxMDAwL3NcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIOWFiOaKiuacq+S9jeiHszDvvIzlho3mr4/mrKHliqAyXG4gICAgICAgICAgICAgICAgZnJlcXVlbmN5ICs9IDIgKiBjb3VudCAtIDE7XG4gICAgICAgICAgICAgICAgc3RlcCA9IE1hdGguZmxvb3IoZnJlcXVlbmN5IC8gMjApO1xuICAgICAgICAgICAgICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZuc1tpXShzdGVwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8g5oqK5pyr5L2N6L+Y5Y6f5oiQMVxuICAgICAgICAgICAgICAgIHRoaXMuZm5zW2kgKyAxXSA9IGZyZXF1ZW5jeSAlIDIwICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbmcpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5wcm9jZXNzKCksIGRpZmYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZChmbiwgZnJlcXVlbmN5KSB7XG4gICAgICAgIHRoaXMuY29tbWFuZHMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZucy5wdXNoKGZuKTtcbiAgICAgICAgICAgIHRoaXMuZm5zLnB1c2goZnJlcXVlbmN5ID09PSAxMDAwID8gMSA6IDApO1xuICAgICAgICAgICAgdGhpcy5pbmcgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVtb3ZlKGZuKSB7XG4gICAgICAgIHRoaXMuY29tbWFuZHMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpID0gdGhpcy5mbnMuaW5kZXhPZihmbik7XG4gICAgICAgICAgICBpZiAoaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZucy5zcGxpY2UoaSwgMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmluZyA9IHRoaXMuZm5zLmxlbmd0aCA+IDA7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblRpbWVyLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBJbmplY3RhYmxlIH1cbl07XG4iXX0=