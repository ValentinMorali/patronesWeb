/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectionStrategy } from '@angular/core';
import { getValueInRange } from '../util/util';
import { NgbProgressbarConfig } from './progressbar-config';
/**
 * A directive that provides feedback on the progress of a workflow or an action.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = [1, "progress"];
const _c1 = ["role", "progressbar", "aria-valuemin", "0", 3, "aria-valuenow", "aria-valuemax"];
const _c2 = [4, "ngIf"];
var I18N_3;
if (ngI18nClosureMode) {
    const MSG_EXTERNAL_ngb_progressbar_value$$ESM5_PROGRESSBAR_PROGRESSBAR_JS__4 = goog.getMsg("{$interpolation}%", { "interpolation": "\uFFFD0\uFFFD" });
    I18N_3 = MSG_EXTERNAL_ngb_progressbar_value$$ESM5_PROGRESSBAR_PROGRESSBAR_JS__4;
}
else {
    I18N_3 = ɵngcc0.ɵɵi18nLocalize("{$interpolation}%", { "interpolation": "\uFFFD0\uFFFD" });
}
function NgbProgressbar_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵi18n(1, I18N_3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r719 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵi18nExp(ctx_r719.getPercentValue());
    ɵngcc0.ɵɵi18nApply(1);
} }
const _c5 = ["height"];
const _c6 = ["width"];
const _c7 = ["*"];
var NgbProgressbar = /** @class */ (function () {
    function NgbProgressbar(config) {
        /**
         * The current value for the progress bar.
         *
         * Should be in the `[0, max]` range.
         */
        this.value = 0;
        this.max = config.max;
        this.animated = config.animated;
        this.striped = config.striped;
        this.type = config.type;
        this.showValue = config.showValue;
        this.height = config.height;
    }
    /**
     * @return {?}
     */
    NgbProgressbar.prototype.getValue = /**
     * @return {?}
     */
    function () { return getValueInRange(this.value, this.max); };
    /**
     * @return {?}
     */
    NgbProgressbar.prototype.getPercentValue = /**
     * @return {?}
     */
    function () { return 100 * this.getValue() / this.max; };
    /** @nocollapse */
    NgbProgressbar.ctorParameters = function () { return [
        { type: NgbProgressbarConfig }
    ]; };
    NgbProgressbar.propDecorators = {
        max: [{ type: Input }],
        animated: [{ type: Input }],
        striped: [{ type: Input }],
        showValue: [{ type: Input }],
        type: [{ type: Input }],
        value: [{ type: Input }],
        height: [{ type: Input }]
    };
NgbProgressbar.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: NgbProgressbar, selectors: [["ngb-progressbar"]], factory: function NgbProgressbar_Factory(t) { return new (t || NgbProgressbar)(ɵngcc0.ɵɵdirectiveInject(NgbProgressbarConfig)); }, inputs: { value: "value", max: "max", animated: "animated", striped: "striped", type: "type", showValue: "showValue", height: "height" }, ngContentSelectors: _c7, consts: 4, vars: 6, template: function NgbProgressbar_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", _c0);
        ɵngcc0.ɵɵstyling(null, _c5);
        ɵngcc0.ɵɵelementStart(1, "div", _c1);
        ɵngcc0.ɵɵstyling(null, _c6);
        ɵngcc0.ɵɵtemplate(2, NgbProgressbar_span_2_Template, 2, 1, "span", _c2);
        ɵngcc0.ɵɵprojection(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp(0, ctx.height);
        ɵngcc0.ɵɵstylingApply();
        ɵngcc0.ɵɵselect(1);
        ɵngcc0.ɵɵclassMap(ɵngcc0.ɵɵinterpolation3("progress-bar", ctx.type ? " bg-" + ctx.type : "", "", ctx.animated ? " progress-bar-animated" : "", "", ctx.striped ? " progress-bar-striped" : "", ""));
        ɵngcc0.ɵɵstyleProp(0, ctx.getPercentValue(), "%");
        ɵngcc0.ɵɵstylingApply();
        ɵngcc0.ɵɵattribute("aria-valuenow", ctx.getValue())("aria-valuemax", ctx.max);
        ɵngcc0.ɵɵselect(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showValue);
    } }, directives: [ɵngcc1.NgIf], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbProgressbar, [{
        type: Component,
        args: [{
                selector: 'ngb-progressbar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: "\n    <div class=\"progress\" [style.height]=\"height\">\n      <div class=\"progress-bar{{type ? ' bg-' + type : ''}}{{animated ? ' progress-bar-animated' : ''}}{{striped ?\n    ' progress-bar-striped' : ''}}\" role=\"progressbar\" [style.width.%]=\"getPercentValue()\"\n    [attr.aria-valuenow]=\"getValue()\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"max\">\n        <span *ngIf=\"showValue\" i18n=\"@@ngb.progressbar.value\">{{getPercentValue()}}%</span><ng-content></ng-content>\n      </div>\n    </div>\n  "
            }]
    }], function () { return [{ type: NgbProgressbarConfig }]; }, { value: [{
            type: Input
        }], max: [{
            type: Input
        }], animated: [{
            type: Input
        }], striped: [{
            type: Input
        }], type: [{
            type: Input
        }], showValue: [{
            type: Input
        }], height: [{
            type: Input
        }], getValue: [], getPercentValue: [] });
    return NgbProgressbar;
}());
export { NgbProgressbar };
if (false) {
    /**
     * The maximal value to be displayed in the progressbar.
     * @type {?}
     */
    NgbProgressbar.prototype.max;
    /**
     * If `true`, the stripes on the progressbar are animated.
     *
     * Takes effect only for browsers supporting CSS3 animations, and if `striped` is `true`.
     * @type {?}
     */
    NgbProgressbar.prototype.animated;
    /**
     * If `true`, the progress bars will be displayed as striped.
     * @type {?}
     */
    NgbProgressbar.prototype.striped;
    /**
     * If `true`, the current percentage will be shown in the `xx%` format.
     * @type {?}
     */
    NgbProgressbar.prototype.showValue;
    /**
     * The type of the progress bar.
     *
     * Currently Bootstrap supports `"success"`, `"info"`, `"warning"` or `"danger"`.
     * @type {?}
     */
    NgbProgressbar.prototype.type;
    /**
     * The current value for the progress bar.
     *
     * Should be in the `[0, max]` range.
     * @type {?}
     */
    NgbProgressbar.prototype.value;
    /**
     * THe height of the progress bar.
     *
     * Accepts any valid CSS height values, ex. `"2rem"`
     * @type {?}
     */
    NgbProgressbar.prototype.height;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L3BhdHJvbmVzL3BhdHJvbmVzU2lkZXJjYVdlYi9Gcm9udGVuZC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtNS9wcm9ncmVzc2Jhci9wcm9ncmVzc2Jhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZEQTRCNkQsQUFPdkQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lEQWFBIiwiZmlsZSI6InByb2dyZXNzYmFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBnZXRWYWx1ZUluUmFuZ2UgfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IHsgTmdiUHJvZ3Jlc3NiYXJDb25maWcgfSBmcm9tICcuL3Byb2dyZXNzYmFyLWNvbmZpZyc7XG4vKipcbiAqIEEgZGlyZWN0aXZlIHRoYXQgcHJvdmlkZXMgZmVlZGJhY2sgb24gdGhlIHByb2dyZXNzIG9mIGEgd29ya2Zsb3cgb3IgYW4gYWN0aW9uLlxuICovXG52YXIgTmdiUHJvZ3Jlc3NiYXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmdiUHJvZ3Jlc3NiYXIoY29uZmlnKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY3VycmVudCB2YWx1ZSBmb3IgdGhlIHByb2dyZXNzIGJhci5cbiAgICAgICAgICpcbiAgICAgICAgICogU2hvdWxkIGJlIGluIHRoZSBgWzAsIG1heF1gIHJhbmdlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52YWx1ZSA9IDA7XG4gICAgICAgIHRoaXMubWF4ID0gY29uZmlnLm1heDtcbiAgICAgICAgdGhpcy5hbmltYXRlZCA9IGNvbmZpZy5hbmltYXRlZDtcbiAgICAgICAgdGhpcy5zdHJpcGVkID0gY29uZmlnLnN0cmlwZWQ7XG4gICAgICAgIHRoaXMudHlwZSA9IGNvbmZpZy50eXBlO1xuICAgICAgICB0aGlzLnNob3dWYWx1ZSA9IGNvbmZpZy5zaG93VmFsdWU7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gY29uZmlnLmhlaWdodDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBOZ2JQcm9ncmVzc2Jhci5wcm90b3R5cGUuZ2V0VmFsdWUgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldFZhbHVlSW5SYW5nZSh0aGlzLnZhbHVlLCB0aGlzLm1heCk7IH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBOZ2JQcm9ncmVzc2Jhci5wcm90b3R5cGUuZ2V0UGVyY2VudFZhbHVlID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiAxMDAgKiB0aGlzLmdldFZhbHVlKCkgLyB0aGlzLm1heDsgfTtcbiAgICBOZ2JQcm9ncmVzc2Jhci5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICduZ2ItcHJvZ3Jlc3NiYXInLFxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiXFxuICAgIDxkaXYgY2xhc3M9XFxcInByb2dyZXNzXFxcIiBbc3R5bGUuaGVpZ2h0XT1cXFwiaGVpZ2h0XFxcIj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJwcm9ncmVzcy1iYXJ7e3R5cGUgPyAnIGJnLScgKyB0eXBlIDogJyd9fXt7YW5pbWF0ZWQgPyAnIHByb2dyZXNzLWJhci1hbmltYXRlZCcgOiAnJ319e3tzdHJpcGVkID9cXG4gICAgJyBwcm9ncmVzcy1iYXItc3RyaXBlZCcgOiAnJ319XFxcIiByb2xlPVxcXCJwcm9ncmVzc2JhclxcXCIgW3N0eWxlLndpZHRoLiVdPVxcXCJnZXRQZXJjZW50VmFsdWUoKVxcXCJcXG4gICAgW2F0dHIuYXJpYS12YWx1ZW5vd109XFxcImdldFZhbHVlKClcXFwiIGFyaWEtdmFsdWVtaW49XFxcIjBcXFwiIFthdHRyLmFyaWEtdmFsdWVtYXhdPVxcXCJtYXhcXFwiPlxcbiAgICAgICAgPHNwYW4gKm5nSWY9XFxcInNob3dWYWx1ZVxcXCIgaTE4bj1cXFwiQEBuZ2IucHJvZ3Jlc3NiYXIudmFsdWVcXFwiPnt7Z2V0UGVyY2VudFZhbHVlKCl9fSU8L3NwYW4+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gIFwiXG4gICAgICAgICAgICAgICAgfV0gfVxuICAgIF07XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgTmdiUHJvZ3Jlc3NiYXIuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogTmdiUHJvZ3Jlc3NiYXJDb25maWcgfVxuICAgIF07IH07XG4gICAgTmdiUHJvZ3Jlc3NiYXIucHJvcERlY29yYXRvcnMgPSB7XG4gICAgICAgIG1heDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgICAgIGFuaW1hdGVkOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICAgICAgc3RyaXBlZDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgICAgIHNob3dWYWx1ZTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgICAgIHR5cGU6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgICAgICB2YWx1ZTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgICAgIGhlaWdodDogW3sgdHlwZTogSW5wdXQgfV1cbiAgICB9O1xuICAgIHJldHVybiBOZ2JQcm9ncmVzc2Jhcjtcbn0oKSk7XG5leHBvcnQgeyBOZ2JQcm9ncmVzc2JhciB9O1xuaWYgKGZhbHNlKSB7XG4gICAgLyoqXG4gICAgICogVGhlIG1heGltYWwgdmFsdWUgdG8gYmUgZGlzcGxheWVkIGluIHRoZSBwcm9ncmVzc2Jhci5cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBOZ2JQcm9ncmVzc2Jhci5wcm90b3R5cGUubWF4O1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgdGhlIHN0cmlwZXMgb24gdGhlIHByb2dyZXNzYmFyIGFyZSBhbmltYXRlZC5cbiAgICAgKlxuICAgICAqIFRha2VzIGVmZmVjdCBvbmx5IGZvciBicm93c2VycyBzdXBwb3J0aW5nIENTUzMgYW5pbWF0aW9ucywgYW5kIGlmIGBzdHJpcGVkYCBpcyBgdHJ1ZWAuXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTmdiUHJvZ3Jlc3NiYXIucHJvdG90eXBlLmFuaW1hdGVkO1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgdGhlIHByb2dyZXNzIGJhcnMgd2lsbCBiZSBkaXNwbGF5ZWQgYXMgc3RyaXBlZC5cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBOZ2JQcm9ncmVzc2Jhci5wcm90b3R5cGUuc3RyaXBlZDtcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIHRoZSBjdXJyZW50IHBlcmNlbnRhZ2Ugd2lsbCBiZSBzaG93biBpbiB0aGUgYHh4JWAgZm9ybWF0LlxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE5nYlByb2dyZXNzYmFyLnByb3RvdHlwZS5zaG93VmFsdWU7XG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIHByb2dyZXNzIGJhci5cbiAgICAgKlxuICAgICAqIEN1cnJlbnRseSBCb290c3RyYXAgc3VwcG9ydHMgYFwic3VjY2Vzc1wiYCwgYFwiaW5mb1wiYCwgYFwid2FybmluZ1wiYCBvciBgXCJkYW5nZXJcImAuXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTmdiUHJvZ3Jlc3NiYXIucHJvdG90eXBlLnR5cGU7XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgdmFsdWUgZm9yIHRoZSBwcm9ncmVzcyBiYXIuXG4gICAgICpcbiAgICAgKiBTaG91bGQgYmUgaW4gdGhlIGBbMCwgbWF4XWAgcmFuZ2UuXG4gICAgICogQHR5cGUgez99XG4gICAgICovXG4gICAgTmdiUHJvZ3Jlc3NiYXIucHJvdG90eXBlLnZhbHVlO1xuICAgIC8qKlxuICAgICAqIFRIZSBoZWlnaHQgb2YgdGhlIHByb2dyZXNzIGJhci5cbiAgICAgKlxuICAgICAqIEFjY2VwdHMgYW55IHZhbGlkIENTUyBoZWlnaHQgdmFsdWVzLCBleC4gYFwiMnJlbVwiYFxuICAgICAqIEB0eXBlIHs/fVxuICAgICAqL1xuICAgIE5nYlByb2dyZXNzYmFyLnByb3RvdHlwZS5oZWlnaHQ7XG59XG4iXX0=