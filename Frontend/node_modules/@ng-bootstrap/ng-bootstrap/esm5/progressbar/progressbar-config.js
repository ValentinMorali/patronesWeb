/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [`NgbProgressbar`](#/components/progressbar/api#NgbProgressbar) component.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the progress bars used in the application.
 */
import * as ɵngcc0 from '@angular/core';
var NgbProgressbarConfig = /** @class */ (function () {
    function NgbProgressbarConfig() {
        this.max = 100;
        this.animated = false;
        this.striped = false;
        this.showValue = false;
    }
    /** @nocollapse */ NgbProgressbarConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbProgressbarConfig_Factory() { return new NgbProgressbarConfig(); }, token: NgbProgressbarConfig, providedIn: "root" });
NgbProgressbarConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbProgressbarConfig, factory: function NgbProgressbarConfig_Factory(t) { return new (t || NgbProgressbarConfig)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbProgressbarConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { max: [], animated: [], striped: [], showValue: [] });
    return NgbProgressbarConfig;
}());
export { NgbProgressbarConfig };
if (false) {
    /** @type {?} */
    NgbProgressbarConfig.prototype.max;
    /** @type {?} */
    NgbProgressbarConfig.prototype.animated;
    /** @type {?} */
    NgbProgressbarConfig.prototype.striped;
    /** @type {?} */
    NgbProgressbarConfig.prototype.type;
    /** @type {?} */
    NgbProgressbarConfig.prototype.showValue;
    /** @type {?} */
    NgbProgressbarConfig.prototype.height;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L3BhdHJvbmVzL3BhdHJvbmVzU2lkZXJjYVdlYi9Gcm9udGVuZC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtNS9wcm9ncmVzc2Jhci9wcm9ncmVzc2Jhci1jb25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7QUFZQTs7Ozs7O0tBTUssQUFHQzs7Ozs7OzJGQUM0TiIsImZpbGUiOiJwcm9ncmVzc2Jhci1jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbi8qKlxuICogQSBjb25maWd1cmF0aW9uIHNlcnZpY2UgZm9yIHRoZSBbYE5nYlByb2dyZXNzYmFyYF0oIy9jb21wb25lbnRzL3Byb2dyZXNzYmFyL2FwaSNOZ2JQcm9ncmVzc2JhcikgY29tcG9uZW50LlxuICpcbiAqIFlvdSBjYW4gaW5qZWN0IHRoaXMgc2VydmljZSwgdHlwaWNhbGx5IGluIHlvdXIgcm9vdCBjb21wb25lbnQsIGFuZCBjdXN0b21pemUgdGhlIHZhbHVlcyBvZiBpdHMgcHJvcGVydGllcyBpblxuICogb3JkZXIgdG8gcHJvdmlkZSBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIHRoZSBwcm9ncmVzcyBiYXJzIHVzZWQgaW4gdGhlIGFwcGxpY2F0aW9uLlxuICovXG52YXIgTmdiUHJvZ3Jlc3NiYXJDb25maWcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmdiUHJvZ3Jlc3NiYXJDb25maWcoKSB7XG4gICAgICAgIHRoaXMubWF4ID0gMTAwO1xuICAgICAgICB0aGlzLmFuaW1hdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3RyaXBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNob3dWYWx1ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBOZ2JQcm9ncmVzc2JhckNvbmZpZy5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IEluamVjdGFibGUsIGFyZ3M6IFt7IHByb3ZpZGVkSW46ICdyb290JyB9LF0gfVxuICAgIF07XG4gICAgLyoqIEBub2NvbGxhcHNlICovIE5nYlByb2dyZXNzYmFyQ29uZmlnLm5nSW5qZWN0YWJsZURlZiA9IGkwLsm1ybVkZWZpbmVJbmplY3RhYmxlKHsgZmFjdG9yeTogZnVuY3Rpb24gTmdiUHJvZ3Jlc3NiYXJDb25maWdfRmFjdG9yeSgpIHsgcmV0dXJuIG5ldyBOZ2JQcm9ncmVzc2JhckNvbmZpZygpOyB9LCB0b2tlbjogTmdiUHJvZ3Jlc3NiYXJDb25maWcsIHByb3ZpZGVkSW46IFwicm9vdFwiIH0pO1xuICAgIHJldHVybiBOZ2JQcm9ncmVzc2JhckNvbmZpZztcbn0oKSk7XG5leHBvcnQgeyBOZ2JQcm9ncmVzc2JhckNvbmZpZyB9O1xuaWYgKGZhbHNlKSB7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nYlByb2dyZXNzYmFyQ29uZmlnLnByb3RvdHlwZS5tYXg7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nYlByb2dyZXNzYmFyQ29uZmlnLnByb3RvdHlwZS5hbmltYXRlZDtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdiUHJvZ3Jlc3NiYXJDb25maWcucHJvdG90eXBlLnN0cmlwZWQ7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nYlByb2dyZXNzYmFyQ29uZmlnLnByb3RvdHlwZS50eXBlO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ2JQcm9ncmVzc2JhckNvbmZpZy5wcm90b3R5cGUuc2hvd1ZhbHVlO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ2JQcm9ncmVzc2JhckNvbmZpZy5wcm90b3R5cGUuaGVpZ2h0O1xufVxuIl19