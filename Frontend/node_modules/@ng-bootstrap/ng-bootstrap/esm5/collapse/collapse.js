/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input } from '@angular/core';
/**
 * A directive to provide a simple way of hiding and showing elements on the page.
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["collapse", "show"];
var NgbCollapse = /** @class */ (function () {
    function NgbCollapse() {
        /**
         * If `true`, will collapse the element or show it otherwise.
         */
        this.collapsed = false;
    }
    NgbCollapse.propDecorators = {
        collapsed: [{ type: Input, args: ['ngbCollapse',] }]
    };
NgbCollapse.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: NgbCollapse, selectors: [["", "ngbCollapse", ""]], factory: function NgbCollapse_Factory(t) { return new (t || NgbCollapse)(); }, hostBindings: function NgbCollapse_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵstyling(_c0);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp(0, true);
        ɵngcc0.ɵɵclassProp(1, !ctx.collapsed);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { collapsed: ["ngbCollapse", "collapsed"] }, exportAs: ["ngbCollapse"] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbCollapse, [{
        type: Directive,
        args: [{
                selector: '[ngbCollapse]',
                exportAs: 'ngbCollapse',
                host: { '[class.collapse]': 'true', '[class.show]': '!collapsed' }
            }]
    }], function () { return []; }, { collapsed: [{
            type: Input,
            args: ['ngbCollapse']
        }] });
    return NgbCollapse;
}());
export { NgbCollapse };
if (false) {
    /**
     * If `true`, will collapse the element or show it otherwise.
     * @type {?}
     */
    NgbCollapse.prototype.collapsed;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L3BhdHJvbmVzL3BhdHJvbmVzU2lkZXJjYVdlYi9Gcm9udGVuZC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtNS9jb2xsYXBzZS9jb2xsYXBzZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7QUFRQTs7Ozs7O0tBTUssQUFPQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2NBR0EiLCJmaWxlIjoiY29sbGFwc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBBIGRpcmVjdGl2ZSB0byBwcm92aWRlIGEgc2ltcGxlIHdheSBvZiBoaWRpbmcgYW5kIHNob3dpbmcgZWxlbWVudHMgb24gdGhlIHBhZ2UuXG4gKi9cbnZhciBOZ2JDb2xsYXBzZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOZ2JDb2xsYXBzZSgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIGB0cnVlYCwgd2lsbCBjb2xsYXBzZSB0aGUgZWxlbWVudCBvciBzaG93IGl0IG90aGVyd2lzZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29sbGFwc2VkID0gZmFsc2U7XG4gICAgfVxuICAgIE5nYkNvbGxhcHNlLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogRGlyZWN0aXZlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ1tuZ2JDb2xsYXBzZV0nLFxuICAgICAgICAgICAgICAgICAgICBleHBvcnRBczogJ25nYkNvbGxhcHNlJyxcbiAgICAgICAgICAgICAgICAgICAgaG9zdDogeyAnW2NsYXNzLmNvbGxhcHNlXSc6ICd0cnVlJywgJ1tjbGFzcy5zaG93XSc6ICchY29sbGFwc2VkJyB9XG4gICAgICAgICAgICAgICAgfSxdIH1cbiAgICBdO1xuICAgIE5nYkNvbGxhcHNlLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICBjb2xsYXBzZWQ6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ25nYkNvbGxhcHNlJyxdIH1dXG4gICAgfTtcbiAgICByZXR1cm4gTmdiQ29sbGFwc2U7XG59KCkpO1xuZXhwb3J0IHsgTmdiQ29sbGFwc2UgfTtcbmlmIChmYWxzZSkge1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgd2lsbCBjb2xsYXBzZSB0aGUgZWxlbWVudCBvciBzaG93IGl0IG90aGVyd2lzZS5cbiAgICAgKiBAdHlwZSB7P31cbiAgICAgKi9cbiAgICBOZ2JDb2xsYXBzZS5wcm90b3R5cGUuY29sbGFwc2VkO1xufVxuIl19