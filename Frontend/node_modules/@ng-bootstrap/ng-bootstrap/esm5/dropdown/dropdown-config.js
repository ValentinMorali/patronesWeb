/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [`NgbDropdown`](#/components/dropdown/api#NgbDropdown) component.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all the dropdowns used in the application.
 */
import * as ɵngcc0 from '@angular/core';
var NgbDropdownConfig = /** @class */ (function () {
    function NgbDropdownConfig() {
        this.autoClose = true;
        this.placement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];
    }
    /** @nocollapse */ NgbDropdownConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbDropdownConfig_Factory() { return new NgbDropdownConfig(); }, token: NgbDropdownConfig, providedIn: "root" });
NgbDropdownConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbDropdownConfig, factory: function NgbDropdownConfig_Factory(t) { return new (t || NgbDropdownConfig)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbDropdownConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { autoClose: [], placement: [] });
    return NgbDropdownConfig;
}());
export { NgbDropdownConfig };
if (false) {
    /** @type {?} */
    NgbDropdownConfig.prototype.autoClose;
    /** @type {?} */
    NgbDropdownConfig.prototype.placement;
    /** @type {?} */
    NgbDropdownConfig.prototype.container;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L3BhdHJvbmVzL3BhdHJvbmVzU2lkZXJjYVdlYi9Gcm9udGVuZC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtNS9kcm9wZG93bi9kcm9wZG93bi1jb25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7QUFZQTs7OztLQUlLLEFBR0M7Ozs7OztzRUFDZ04iLCJmaWxlIjoiZHJvcGRvd24tY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIGkwIGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG4vKipcbiAqIEEgY29uZmlndXJhdGlvbiBzZXJ2aWNlIGZvciB0aGUgW2BOZ2JEcm9wZG93bmBdKCMvY29tcG9uZW50cy9kcm9wZG93bi9hcGkjTmdiRHJvcGRvd24pIGNvbXBvbmVudC5cbiAqXG4gKiBZb3UgY2FuIGluamVjdCB0aGlzIHNlcnZpY2UsIHR5cGljYWxseSBpbiB5b3VyIHJvb3QgY29tcG9uZW50LCBhbmQgY3VzdG9taXplIHRoZSB2YWx1ZXMgb2YgaXRzIHByb3BlcnRpZXMgaW5cbiAqIG9yZGVyIHRvIHByb3ZpZGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCB0aGUgZHJvcGRvd25zIHVzZWQgaW4gdGhlIGFwcGxpY2F0aW9uLlxuICovXG52YXIgTmdiRHJvcGRvd25Db25maWcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmdiRHJvcGRvd25Db25maWcoKSB7XG4gICAgICAgIHRoaXMuYXV0b0Nsb3NlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wbGFjZW1lbnQgPSBbJ2JvdHRvbS1sZWZ0JywgJ2JvdHRvbS1yaWdodCcsICd0b3AtbGVmdCcsICd0b3AtcmlnaHQnXTtcbiAgICB9XG4gICAgTmdiRHJvcGRvd25Db25maWcuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBJbmplY3RhYmxlLCBhcmdzOiBbeyBwcm92aWRlZEluOiAncm9vdCcgfSxdIH1cbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqLyBOZ2JEcm9wZG93bkNvbmZpZy5uZ0luamVjdGFibGVEZWYgPSBpMC7Jtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGZ1bmN0aW9uIE5nYkRyb3Bkb3duQ29uZmlnX0ZhY3RvcnkoKSB7IHJldHVybiBuZXcgTmdiRHJvcGRvd25Db25maWcoKTsgfSwgdG9rZW46IE5nYkRyb3Bkb3duQ29uZmlnLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcbiAgICByZXR1cm4gTmdiRHJvcGRvd25Db25maWc7XG59KCkpO1xuZXhwb3J0IHsgTmdiRHJvcGRvd25Db25maWcgfTtcbmlmIChmYWxzZSkge1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ2JEcm9wZG93bkNvbmZpZy5wcm90b3R5cGUuYXV0b0Nsb3NlO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ2JEcm9wZG93bkNvbmZpZy5wcm90b3R5cGUucGxhY2VtZW50O1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ2JEcm9wZG93bkNvbmZpZy5wcm90b3R5cGUuY29udGFpbmVyO1xufVxuIl19