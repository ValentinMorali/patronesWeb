/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * A configuration service for the [NgbCarousel](#/components/carousel/api#NgbCarousel) component.
 *
 * You can inject this service, typically in your root component, and customize its properties
 * to provide default values for all carousels used in the application.
 */
import * as ɵngcc0 from '@angular/core';
export class NgbCarouselConfig {
    constructor() {
        this.interval = 5000;
        this.wrap = true;
        this.keyboard = true;
        this.pauseOnHover = true;
        this.showNavigationArrows = true;
        this.showNavigationIndicators = true;
    }
}
NgbCarouselConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbCarouselConfig, factory: function NgbCarouselConfig_Factory(t) { return new (t || NgbCarouselConfig)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbCarouselConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { constructor: [], interval: [], wrap: [], keyboard: [], pauseOnHover: [], showNavigationArrows: [], showNavigationIndicators: [] });
/** @nocollapse */ NgbCarouselConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbCarouselConfig_Factory() { return new NgbCarouselConfig(); }, token: NgbCarouselConfig, providedIn: "root" });
if (false) {
    /** @type {?} */
    NgbCarouselConfig.prototype.interval;
    /** @type {?} */
    NgbCarouselConfig.prototype.wrap;
    /** @type {?} */
    NgbCarouselConfig.prototype.keyboard;
    /** @type {?} */
    NgbCarouselConfig.prototype.pauseOnHover;
    /** @type {?} */
    NgbCarouselConfig.prototype.showNavigationArrows;
    /** @type {?} */
    NgbCarouselConfig.prototype.showNavigationIndicators;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L3BhdHJvbmVzL3BhdHJvbmVzU2lkZXJjYVdlYi9Gcm9udGVuZC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtMjAxNS9jYXJvdXNlbC9jYXJvdXNlbC1jb25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7QUFZQTs7Ozs7Ozs7Ozs7Ozs7Q0FTQyx3S0FHQyIsImZpbGUiOiJjYXJvdXNlbC1jb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzLGV4dHJhUmVxdWlyZSxtaXNzaW5nT3ZlcnJpZGUsbWlzc2luZ1JldHVybix1bnVzZWRQcml2YXRlTWVtYmVycyx1c2VsZXNzQ29kZX0gY2hlY2tlZCBieSB0c2NcbiAqL1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbi8qKlxuICogQSBjb25maWd1cmF0aW9uIHNlcnZpY2UgZm9yIHRoZSBbTmdiQ2Fyb3VzZWxdKCMvY29tcG9uZW50cy9jYXJvdXNlbC9hcGkjTmdiQ2Fyb3VzZWwpIGNvbXBvbmVudC5cbiAqXG4gKiBZb3UgY2FuIGluamVjdCB0aGlzIHNlcnZpY2UsIHR5cGljYWxseSBpbiB5b3VyIHJvb3QgY29tcG9uZW50LCBhbmQgY3VzdG9taXplIGl0cyBwcm9wZXJ0aWVzXG4gKiB0byBwcm92aWRlIGRlZmF1bHQgdmFsdWVzIGZvciBhbGwgY2Fyb3VzZWxzIHVzZWQgaW4gdGhlIGFwcGxpY2F0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgTmdiQ2Fyb3VzZWxDb25maWcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmludGVydmFsID0gNTAwMDtcbiAgICAgICAgdGhpcy53cmFwID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5rZXlib2FyZCA9IHRydWU7XG4gICAgICAgIHRoaXMucGF1c2VPbkhvdmVyID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zaG93TmF2aWdhdGlvbkFycm93cyA9IHRydWU7XG4gICAgICAgIHRoaXMuc2hvd05hdmlnYXRpb25JbmRpY2F0b3JzID0gdHJ1ZTtcbiAgICB9XG59XG5OZ2JDYXJvdXNlbENvbmZpZy5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogSW5qZWN0YWJsZSwgYXJnczogW3sgcHJvdmlkZWRJbjogJ3Jvb3QnIH0sXSB9XG5dO1xuLyoqIEBub2NvbGxhcHNlICovIE5nYkNhcm91c2VsQ29uZmlnLm5nSW5qZWN0YWJsZURlZiA9IGkwLsm1ybVkZWZpbmVJbmplY3RhYmxlKHsgZmFjdG9yeTogZnVuY3Rpb24gTmdiQ2Fyb3VzZWxDb25maWdfRmFjdG9yeSgpIHsgcmV0dXJuIG5ldyBOZ2JDYXJvdXNlbENvbmZpZygpOyB9LCB0b2tlbjogTmdiQ2Fyb3VzZWxDb25maWcsIHByb3ZpZGVkSW46IFwicm9vdFwiIH0pO1xuaWYgKGZhbHNlKSB7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nYkNhcm91c2VsQ29uZmlnLnByb3RvdHlwZS5pbnRlcnZhbDtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdiQ2Fyb3VzZWxDb25maWcucHJvdG90eXBlLndyYXA7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nYkNhcm91c2VsQ29uZmlnLnByb3RvdHlwZS5rZXlib2FyZDtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdiQ2Fyb3VzZWxDb25maWcucHJvdG90eXBlLnBhdXNlT25Ib3ZlcjtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdiQ2Fyb3VzZWxDb25maWcucHJvdG90eXBlLnNob3dOYXZpZ2F0aW9uQXJyb3dzO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ2JDYXJvdXNlbENvbmZpZy5wcm90b3R5cGUuc2hvd05hdmlnYXRpb25JbmRpY2F0b3JzO1xufVxuIl19