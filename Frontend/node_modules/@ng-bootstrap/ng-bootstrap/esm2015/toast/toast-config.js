/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Interface used to type all toast config options. See `NgbToastConfig`.
 *
 * \@since 5.0.0
 * @record
 */
import * as ɵngcc0 from '@angular/core';
export function NgbToastOptions() { }
if (false) {
    /**
     * Specify if the toast component should emit the `hide()` output
     * after a certain `delay` in ms.
     * @type {?|undefined}
     */
    NgbToastOptions.prototype.autohide;
    /**
     * Delay in ms after which the `hide()` output should be emitted.
     * @type {?|undefined}
     */
    NgbToastOptions.prototype.delay;
    /**
     * Type of aria-live attribute to be used.
     *
     * Could be one of these 2 values (as string):
     * - `polite` (default)
     * - `alert`
     * @type {?|undefined}
     */
    NgbToastOptions.prototype.ariaLive;
}
/**
 * Configuration service for the NgbToast component. You can inject this service, typically in your root component,
 * and customize the values of its properties in order to provide default values for all the toasts used in the
 * application.
 *
 * \@since 5.0.0
 */
export class NgbToastConfig {
    constructor() {
        this.autohide = true;
        this.delay = 500;
        this.ariaLive = 'polite';
    }
}
NgbToastConfig.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: NgbToastConfig, factory: function NgbToastConfig_Factory(t) { return new (t || NgbToastConfig)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(NgbToastConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { constructor: [], autohide: [], delay: [], ariaLive: [] });
/** @nocollapse */ NgbToastConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgbToastConfig_Factory() { return new NgbToastConfig(); }, token: NgbToastConfig, providedIn: "root" });
if (false) {
    /** @type {?} */
    NgbToastConfig.prototype.autohide;
    /** @type {?} */
    NgbToastConfig.prototype.delay;
    /** @type {?} */
    NgbToastConfig.prototype.ariaLive;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L3BhdHJvbmVzL3BhdHJvbmVzU2lkZXJjYVdlYi9Gcm9udGVuZC9ub2RlX21vZHVsZXMvQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAvZXNtMjAxNS90b2FzdC90b2FzdC1jb25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7QUFZQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FvQ0MsK0ZBR0MiLCJmaWxlIjoidG9hc3QtY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlcyxleHRyYVJlcXVpcmUsbWlzc2luZ092ZXJyaWRlLG1pc3NpbmdSZXR1cm4sdW51c2VkUHJpdmF0ZU1lbWJlcnMsdXNlbGVzc0NvZGV9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIGkwIGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG4vKipcbiAqIEludGVyZmFjZSB1c2VkIHRvIHR5cGUgYWxsIHRvYXN0IGNvbmZpZyBvcHRpb25zLiBTZWUgYE5nYlRvYXN0Q29uZmlnYC5cbiAqXG4gKiBcXEBzaW5jZSA1LjAuMFxuICogQHJlY29yZFxuICovXG5leHBvcnQgZnVuY3Rpb24gTmdiVG9hc3RPcHRpb25zKCkgeyB9XG5pZiAoZmFsc2UpIHtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IGlmIHRoZSB0b2FzdCBjb21wb25lbnQgc2hvdWxkIGVtaXQgdGhlIGBoaWRlKClgIG91dHB1dFxuICAgICAqIGFmdGVyIGEgY2VydGFpbiBgZGVsYXlgIGluIG1zLlxuICAgICAqIEB0eXBlIHs/fHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBOZ2JUb2FzdE9wdGlvbnMucHJvdG90eXBlLmF1dG9oaWRlO1xuICAgIC8qKlxuICAgICAqIERlbGF5IGluIG1zIGFmdGVyIHdoaWNoIHRoZSBgaGlkZSgpYCBvdXRwdXQgc2hvdWxkIGJlIGVtaXR0ZWQuXG4gICAgICogQHR5cGUgez98dW5kZWZpbmVkfVxuICAgICAqL1xuICAgIE5nYlRvYXN0T3B0aW9ucy5wcm90b3R5cGUuZGVsYXk7XG4gICAgLyoqXG4gICAgICogVHlwZSBvZiBhcmlhLWxpdmUgYXR0cmlidXRlIHRvIGJlIHVzZWQuXG4gICAgICpcbiAgICAgKiBDb3VsZCBiZSBvbmUgb2YgdGhlc2UgMiB2YWx1ZXMgKGFzIHN0cmluZyk6XG4gICAgICogLSBgcG9saXRlYCAoZGVmYXVsdClcbiAgICAgKiAtIGBhbGVydGBcbiAgICAgKiBAdHlwZSB7P3x1bmRlZmluZWR9XG4gICAgICovXG4gICAgTmdiVG9hc3RPcHRpb25zLnByb3RvdHlwZS5hcmlhTGl2ZTtcbn1cbi8qKlxuICogQ29uZmlndXJhdGlvbiBzZXJ2aWNlIGZvciB0aGUgTmdiVG9hc3QgY29tcG9uZW50LiBZb3UgY2FuIGluamVjdCB0aGlzIHNlcnZpY2UsIHR5cGljYWxseSBpbiB5b3VyIHJvb3QgY29tcG9uZW50LFxuICogYW5kIGN1c3RvbWl6ZSB0aGUgdmFsdWVzIG9mIGl0cyBwcm9wZXJ0aWVzIGluIG9yZGVyIHRvIHByb3ZpZGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCB0aGUgdG9hc3RzIHVzZWQgaW4gdGhlXG4gKiBhcHBsaWNhdGlvbi5cbiAqXG4gKiBcXEBzaW5jZSA1LjAuMFxuICovXG5leHBvcnQgY2xhc3MgTmdiVG9hc3RDb25maWcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmF1dG9oaWRlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZWxheSA9IDUwMDtcbiAgICAgICAgdGhpcy5hcmlhTGl2ZSA9ICdwb2xpdGUnO1xuICAgIH1cbn1cbk5nYlRvYXN0Q29uZmlnLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBJbmplY3RhYmxlLCBhcmdzOiBbeyBwcm92aWRlZEluOiAncm9vdCcgfSxdIH1cbl07XG4vKiogQG5vY29sbGFwc2UgKi8gTmdiVG9hc3RDb25maWcubmdJbmplY3RhYmxlRGVmID0gaTAuybXJtWRlZmluZUluamVjdGFibGUoeyBmYWN0b3J5OiBmdW5jdGlvbiBOZ2JUb2FzdENvbmZpZ19GYWN0b3J5KCkgeyByZXR1cm4gbmV3IE5nYlRvYXN0Q29uZmlnKCk7IH0sIHRva2VuOiBOZ2JUb2FzdENvbmZpZywgcHJvdmlkZWRJbjogXCJyb290XCIgfSk7XG5pZiAoZmFsc2UpIHtcbiAgICAvKiogQHR5cGUgez99ICovXG4gICAgTmdiVG9hc3RDb25maWcucHJvdG90eXBlLmF1dG9oaWRlO1xuICAgIC8qKiBAdHlwZSB7P30gKi9cbiAgICBOZ2JUb2FzdENvbmZpZy5wcm90b3R5cGUuZGVsYXk7XG4gICAgLyoqIEB0eXBlIHs/fSAqL1xuICAgIE5nYlRvYXN0Q29uZmlnLnByb3RvdHlwZS5hcmlhTGl2ZTtcbn1cbiJdfQ==