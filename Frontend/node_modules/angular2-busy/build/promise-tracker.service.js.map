{"version":3,"sources":["c:/patrones/patronesSidercaWeb/Frontend/node_modules/angular2-busy/build/promise-tracker.service.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oMAmEM;;KAED,AAGH","file":"promise-tracker.service.js","sourcesContent":["/**\n * @file Service: PromiseTracker\n * @author yumao<yuzhang.lille@gmail.com>\n */\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Inspired by angular-promise-tracker\n// Add Observable Subscription\nvar core_1 = require(\"@angular/core\");\nvar Subscription_1 = require(\"rxjs/Subscription\");\nvar PromiseTrackerService = (function () {\n    function PromiseTrackerService() {\n        this.promiseList = [];\n        this.delayJustFinished = false;\n    }\n    PromiseTrackerService.prototype.reset = function (options) {\n        var _this = this;\n        this.minDuration = options.minDuration;\n        this.promiseList = [];\n        options.promiseList.forEach(function (promise) {\n            if (!promise || promise['busyFulfilled']) {\n                return;\n            }\n            _this.addPromise(promise);\n        });\n        if (this.promiseList.length === 0) {\n            return;\n        }\n        this.delayJustFinished = false;\n        if (options.delay) {\n            this.delayPromise = setTimeout(function () {\n                _this.delayPromise = null;\n                _this.delayJustFinished = true;\n            }, options.delay);\n        }\n        if (options.minDuration) {\n            this.durationPromise = setTimeout(function () {\n                _this.durationPromise = null;\n            }, options.minDuration + (options.delay || 0));\n        }\n    };\n    PromiseTrackerService.prototype.addPromise = function (promise) {\n        var _this = this;\n        if (this.promiseList.indexOf(promise) !== -1) {\n            return;\n        }\n        this.promiseList.push(promise);\n        if (promise instanceof Promise) {\n            promise.then.call(promise, function () { return _this.finishPromise(promise); }, function () { return _this.finishPromise(promise); });\n        }\n        else if (promise instanceof Subscription_1.Subscription) {\n            promise.add(function () { return _this.finishPromise(promise); });\n        }\n    };\n    PromiseTrackerService.prototype.finishPromise = function (promise) {\n        promise['busyFulfilled'] = true;\n        var index = this.promiseList.indexOf(promise);\n        if (index === -1) {\n            return;\n        }\n        this.promiseList.splice(index, 1);\n    };\n    PromiseTrackerService.prototype.isActive = function () {\n        if (this.delayPromise) {\n            return false;\n        }\n        if (!this.delayJustFinished) {\n            if (this.durationPromise) {\n                return true;\n            }\n            return this.promiseList.length > 0;\n        }\n        this.delayJustFinished = false;\n        if (this.promiseList.length === 0) {\n            this.durationPromise = null;\n        }\n        return this.promiseList.length > 0;\n    };\n    return PromiseTrackerService;\n}());\nPromiseTrackerService.decorators = [\n    { type: core_1.Injectable },\n];\n/** @nocollapse */\nPromiseTrackerService.ctorParameters = function () { return []; };\nexports.PromiseTrackerService = PromiseTrackerService;\n"]}